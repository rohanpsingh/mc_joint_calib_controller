---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: false
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: true
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
- "@MC_CONTROLLER_INSTALL_PREFIX@/WalkerPolicy/states"

# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false

# Additional robots to load
robot_models: []
contacts: []

# Some options for a specific robot
hrp5_p:
  posture:
    stiffness: 1000
    weight: 1
hrp4cr:
  posture:
    stiffness: 1000
    weight: 1

# Implement some additional text states
states:
  Initialize:
    base: MetaTasks
    tasks:
      InitialTask:
        type: posture
        stiffness: 1.0
        weight: 1.0

  HalfSittingState:
    base: HalfSitting
    constraints:
      KinConstraint:
        type: kinematics
        damper: [0.1, 0.01, 0.5]
        velocityPercent: 0.2

  UpdatePostureState:
    base: MetaTasks
    constraints:
      KinConstraint:
        type: kinematics
        damper: [0.1, 0.01, 0.5]
        velocityPercent: 0.02
    tasks:
      posture:
        type: posture
        stiffness: 50.
        weight: 100.
        target:
          RCP: [-0.3]
          LCP: [0.3]
        completion:
          timeout: 5

  JointCalibState:
    base: JointCalib
    hrp5_p:
      activeMotors: ["RCY", "LCY"]
      motorPGains: [200, 200]
      motorDGains: [20, 20]
      qLimitLower: [-20, -20]
      qLimitUpper: [20, 20]

      # activeMotors: ["RCR", "LCR"]
      # motorPGains: [150, 150]
      # motorDGains: [15, 15]
      # qLimitLower: [-30, -30]
      # qLimitUpper: [30, 30]

      # activeMotors: ["RCP", "LCP"]
      # motorPGains: [200, 200]
      # motorDGains: [20, 20]
      # qLimitLower: [-50, -50]
      # qLimitUpper: [20, 20]

      # activeMotors: ["RKP", "LKP"]
      # motorPGains: [150, 150]
      # motorDGains: [15, 15]
      # qLimitLower: [30, 30]
      # qLimitUpper: [80, 80]

      # activeMotors: ["RAP", "LAP"]
      # motorPGains: [80, 80]
      # motorDGains: [8, 8]
      # qLimitLower: [-70, -70]
      # qLimitUpper: [-5, -5]

      # activeMotors: ["RAR", "LAR"]
      # motorPGains: [80, 80]
      # motorDGains: [8, 8]
      # qLimitLower: [-35, -35]
      # qLimitUpper: [35, 35]

      periodSeconds: [1.5, 2, 4, 8]
      numCycles: 2

    hrp4cr:
      # activeMotors: ["R_HIP_Y", "L_HIP_Y"]
      # motorPGains: [100, 100]
      # motorDGains: [10, 10]
      # qLimitLower: [-20, -20]
      # qLimitUpper: [20, 20]

      # activeMotors: ["R_HIP_R", "L_HIP_R"]
      # motorPGains: [100, 100]
      # motorDGains: [10, 10]
      # qLimitLower: [-20, -20]
      # qLimitUpper: [20, 20]

      # activeMotors: ["R_HIP_P", "L_HIP_P"]
      # motorPGains: [100, 100]
      # motorDGains: [10, 10]
      # qLimitLower: [-50, -50]
      # qLimitUpper: [10, 10]

      # activeMotors: ["R_KNEE_P", "L_KNEE_P"]
      # motorPGains: [200, 200]
      # motorDGains: [20, 20]
      # qLimitLower: [20, 20]
      # qLimitUpper: [80, 80]

      activeMotors: ["R_ANKLE_P", "L_ANKLE_P"]
      motorPGains: [80, 80]
      motorDGains: [8, 8]
      qLimitLower: [-50, -50]
      qLimitUpper: [10, 10]

      # activeMotors: ["R_ANKLE_R", "L_ANKLE_R"]
      # motorPGains: [80, 80]
      # motorDGains: [8, 8]
      # qLimitLower: [-30, -30]
      # qLimitUpper: [30, 30]

      periodSeconds: [1.5, 2, 4, 8]
      numCycles: 2

  JointModPDState:
    base: ModifyGains
    duration: 1
    hrp5_p:
      # activeMotors: ["RCP", "LCP"]
      activeMotors: ["RCY", "LCY"]
      motorPGains: [200, 200]
      motorDGains: [20, 20]

      # activeMotors: ["RCR", "LCR"]
      # motorPGains: [150, 150]
      # motorDGains: [15, 15]
      # activeMotors: ["RKP", "LKP"]
      # activeMotors: ["RAP", "LAP"]
      # activeMotors: ["RAR", "LAR"]
      # motorPGains: [80, 80]
      # motorDGains: [8, 8]

    hrp4cr:
      # activeMotors: ["R_HIP_Y", "L_HIP_Y"]
      # motorPGains: [100, 100]
      # motorDGains: [10, 10]

      # activeMotors: ["R_HIP_R", "L_HIP_R"]
      # motorPGains: [100, 100]
      # motorDGains: [10, 10]

      # activeMotors: ["R_HIP_P", "L_HIP_P"]
      # motorPGains: [100, 100]
      # motorDGains: [10, 10]

      # activeMotors: ["R_KNEE_P", "L_KNEE_P"]
      # motorPGains: [200, 200]
      # motorDGains: [20, 20]

      activeMotors: ["R_ANKLE_P", "L_ANKLE_P"]
      motorPGains: [80, 80]
      motorDGains: [8, 8]

      # activeMotors: ["R_ANKLE_R", "L_ANKLE_R"]
      # motorPGains: [80, 80]
      # motorDGains: [8, 8]

# Transitions map
transitions:
- [Initialize, OK, HalfSittingState, Auto]
#- [HalfSittingState, OK, UpdatePostureState, Auto]
#- [UpdatePostureState, OK, JointModPDState, Auto]
- [HalfSittingState, OK, JointModPDState, Auto]
- [JointModPDState, OK, JointCalibState, Auto]

# Initial state
init: Initialize

ObserverPipelines:
- name: CoMObservation
  gui: true
  observers:
    - type: Encoder
      config:
        velocity: encoderVelocities
    - type: Attitude
    - type: BodySensor
      update: false
